Service.java
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

interface Service extends Remote {
    boolean register(String username, String password) throws RemoteException;
    boolean login(String username, String password, ClientCallback callback) throws RemoteException;
    void logout(String username) throws RemoteException;
    boolean addFriend(String username, String friendUsername) throws RemoteException;
    List<String> getFriendList(String username) throws RemoteException;
    int createPost(String username, String content) throws RemoteException;
    List<Post> getNewsFeed(String username) throws RemoteException;
    boolean sendMessage(String from, String to, String content) throws RemoteException;
    List<Message> getMessages(String username) throws RemoteException;
    void likePost(String username, int postId) throws RemoteException;
    void commentPost(String username, int postId, String comment) throws RemoteException;
}


// Data classes
class Post implements java.io.Serializable {
    private static final long serialVersionUID = 1L;
    int id;
    String username;
    String content;
    List<String> likes = new ArrayList<>();
    List<Comment> comments = new ArrayList<>();
    
    Post(int id, String username, String content) {
        this.id = id;
        this.username = username;
        this.content = content;
    }
}

class Comment implements java.io.Serializable {
    private static final long serialVersionUID = 1L;
    String username;
    String content;
    
    Comment(String username, String content) {
        this.username = username;
        this.content = content;
    }
}

class Message implements java.io.Serializable {
    private static final long serialVersionUID = 1L;
    String from;
    String to;
    String content;
    
    Message(String from, String to, String content) {
        this.from = from;
        this.to = to;
        this.content = content;
    }
}

Impl.java
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class Impl extends UnicastRemoteObject implements Service {
    private Map<String, ClientCallback> activeClients = new ConcurrentHashMap<>();
    private Map<String, Set<String>> friends;
    private Map<String, List<Post>> posts;
    private Map<String, List<String>> notifications;
    private int nextPostId = 1;
    
    public Impl() throws RemoteException {
        super();
        friends = new ConcurrentHashMap<>();
        posts = new ConcurrentHashMap<>();
        notifications = new ConcurrentHashMap<>();
    }
    
    public boolean register(String username, String password) throws RemoteException {
        boolean success = DatabaseManager.saveUser(username, password);
        if (success) {
            friends.put(username, new HashSet<>());
            posts.put(username, new ArrayList<>());
            notifications.put(username, new ArrayList<>());
        }
        return success;
    }
    
    public boolean login(String username, String password, ClientCallback callback) throws RemoteException {
        if (DatabaseManager.verifyUser(username, password)) {
            activeClients.put(username, callback);
            if (!friends.containsKey(username)) {
                friends.put(username, DatabaseManager.loadFriends(username));
                posts.put(username, DatabaseManager.loadPosts(username));
                notifications.put(username, new ArrayList<>());
            }
            return true;
        }
        return false;
    }
    
    public void logout(String username) throws RemoteException {
        activeClients.remove(username);
    }

    public boolean addFriend(String username, String friendUsername) throws RemoteException {
        if (!DatabaseManager.userExists(friendUsername)) return false;
        friends.get(username).add(friendUsername);
        DatabaseManager.saveFriend(username, friendUsername);
        
        ClientCallback friendCallback = activeClients.get(friendUsername);
        if (friendCallback != null) {
            friendCallback.notifyNewNotification(username + " added you as a friend");
        }
        return true;
    }

    public List<String> getFriendList(String username) throws RemoteException {
        return new ArrayList<>(friends.get(username));
    }

    public int createPost(String username, String content) throws RemoteException {
        Post post = new Post(nextPostId++, username, content);
        posts.get(username).add(post);
        DatabaseManager.savePost(username, post);
        
        // Notify friends
        for (String friend : friends.get(username)) {
            ClientCallback friendCallback = activeClients.get(friend);
            if (friendCallback != null) {
                friendCallback.notifyNewPost(username, content);
            }
        }
        return post.id;
    }

    public List<Post> getNewsFeed(String username) throws RemoteException {
        List<Post> newsFeed = new ArrayList<>();
        Set<String> userFriends = friends.get(username);
        for (String friend : userFriends) {
            newsFeed.addAll(posts.get(friend));
        }
        newsFeed.sort((p1, p2) -> p2.id - p1.id);
        return newsFeed;
    }

    public boolean sendMessage(String from, String to, String content) throws RemoteException {
        Message msg = new Message(from, to, content);
        DatabaseManager.saveMessage(to, msg);
        
        ClientCallback recipient = activeClients.get(to);
        if (recipient != null) {
            recipient.notifyNewMessage(from, content);
        }
        return true;
    }
    
    public List<Message> getMessages(String username) throws RemoteException {
        return DatabaseManager.loadMessages(username);
    }

    public void likePost(String username, int postId) throws RemoteException {
        for (List<Post> userPosts : posts.values()) {
            for (Post post : userPosts) {
                if (post.id == postId) {
                    // Check if the user has already liked the post
                    if (post.likes.contains(username)) {
                        System.out.println("User has already liked this post.");
                        return;  // Do nothing if already liked
                    }
                    
                    // Add the like if not already liked
                    post.likes.add(username);
                    DatabaseManager.updatePost(post.username, post);
                    
                    // Notify post owner if online
                    ClientCallback ownerCallback = activeClients.get(post.username);
                    if (ownerCallback != null) {
                        ownerCallback.notifyNewNotification(username + " liked your post");
                    }
                    return;
                }
            }
        }
    }
    
    
    public void commentPost(String username, int postId, String comment) throws RemoteException {
        if (comment == null || comment.trim().isEmpty()) {
            System.out.println("Error: Comment cannot be empty.");
            return; // or throw an exception if preferred
        }
    
        for (List<Post> userPosts : posts.values()) {
            for (Post post : userPosts) {
                if (post.id == postId) {
                    // Add comment only if it's valid
                    post.comments.add(new Comment(username, comment));
                    DatabaseManager.updatePost(post.username, post);
                    
                    // Notify post owner if online
                    ClientCallback ownerCallback = activeClients.get(post.username);
                    if (ownerCallback != null) {
                        ownerCallback.notifyNewNotification(username + " commented on your post");
                    }
                    return;
                }
            }
        }
    }    
}

Client.java
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.List;
import java.util.Scanner;



public class Client {
    private Service service;
    private ClientCallback callback;
    private String currentUser = null;
    private Scanner scanner = new Scanner(System.in);

    public Client() {
        try {
            Registry registry = LocateRegistry.getRegistry(null, 1099);
            service = (Service) registry.lookup("FacebookService");
            callback = new ClientCallbackImpl();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void start() {
        while (true) {
            if (currentUser == null) {
                showLoginMenu();
            } else {
                showMainMenu();
            }
        }
    }

    private void showLoginMenu() {
        System.out.println("\n=== Facebook RMI ===");
        System.out.println("1. Login\n2. Register\n3. Exit");
        System.out.print("Choose option: ");
        
        try {
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    login();
                    break;
                case 2:
                    register();
                    break;
                case 3:
                    System.exit(0);
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            scanner.nextLine(); // Clear bad input
        }
    }

    private void login() {
        try {
            System.out.print("Username: ");
            String username = scanner.nextLine();
            System.out.print("Password: ");
            String password = scanner.nextLine();
            
            if (service.login(username, password, callback)) {
                currentUser = username;
                System.out.println("Login successful!");
            } else {
                System.out.println("Login failed!");
            }
        } catch (Exception e) {
            System.err.println("Login error: " + e.getMessage());
        }
    }

    private void register() {
        try {
            System.out.print("Username: ");
            String username = scanner.nextLine();
            System.out.print("Password: ");
            String password = scanner.nextLine();
            
            if (service.register(username, password)) {
                System.out.println("Registration successful!");
            } else {
                System.out.println("Registration failed - username may already exist!");
            }
        } catch (Exception e) {
            System.err.println("Registration error: " + e.getMessage());
        }
    }

    private void showMainMenu() {
        try {
            System.out.println("\n=== Welcome " + currentUser + " ===");
            System.out.println("1. Create Post\n2. View News Feed\n3. Add Friend\n4. View Friends\n" +
                             "5. Send Message\n6. View Messages\n7. Logout");
            System.out.print("Choose option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    createPost();
                    break;
                case 2:
                    viewNewsFeed();
                    break;
                case 3:
                    addFriend();
                    break;
                case 4:
                    viewFriends();
                    break;
                case 5:
                    sendMessage();
                    break;
                case 6:
                    viewMessages();
                    break;
                case 7:
                    logout();
                    break;
                default:
                    System.out.println("Invalid option!");
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            scanner.nextLine();
        }
    }

    private void createPost() throws RemoteException {
        System.out.print("Enter post content: ");
        String content = scanner.nextLine();
        int postId = service.createPost(currentUser, content);
        System.out.println("Post created with ID: " + postId);
    }

    private void viewNewsFeed() throws RemoteException {
        List<Post> newsFeed = service.getNewsFeed(currentUser);
        if (newsFeed.isEmpty()) {
            System.out.println("No posts in news feed!");
            return;
        }

        for (Post post : newsFeed) {
            System.out.println("\n=== Post ===");
            System.out.println("From: " + post.username);
            System.out.println("Content: " + post.content);
            System.out.println("Likes: " + post.likes.size());
            System.out.println("Comments: " + post.comments.size());
            
            System.out.println("\n1. Like\n2. Comment\n3. Next post\n4. Return to menu");
            System.out.print("Choose option: ");
            int action = scanner.nextInt();
            scanner.nextLine();
            
            switch (action) {
                case 1:
                    service.likePost(currentUser, post.id);
                    System.out.println("Post liked!");
                    break;
                case 2:
                    System.out.print("Enter comment: ");
                    String comment = scanner.nextLine();
                    service.commentPost(currentUser, post.id, comment);
                    System.out.println("Comment added!");
                    break;
                case 4:
                    return;
            }
        }
    }

    private void addFriend() throws RemoteException {
        System.out.print("Enter friend's username: ");
        String friend = scanner.nextLine();
        if (service.addFriend(currentUser, friend)) {
            System.out.println("Friend added successfully!");
        } else {
            System.out.println("Failed to add friend - user may not exist!");
        }
    }

    private void viewFriends() throws RemoteException {
        List<String> friends = service.getFriendList(currentUser);
        if (friends.isEmpty()) {
            System.out.println("No friends yet!");
            return;
        }

        System.out.println("\n=== Friends ===");
        for (String friend : friends) {
            System.out.println("- " + friend);
        }
    }

    private void sendMessage() throws RemoteException {
        System.out.print("Enter recipient's username: ");
        String to = scanner.nextLine();
        System.out.print("Enter message: ");
        String message = scanner.nextLine();
        
        if (service.sendMessage(currentUser, to, message)) {
            System.out.println("Message sent successfully!");
        } else {
            System.out.println("Failed to send message - user may not exist!");
        }
    }

    private void viewMessages() throws RemoteException {
        List<Message> messages = service.getMessages(currentUser);
        if (messages.isEmpty()) {
            System.out.println("No messages!");
            return;
        }

        System.out.println("\n=== Messages ===");
        for (Message msg : messages) {
            System.out.println("From: " + msg.from);
            System.out.println("Content: " + msg.content);
            System.out.println("-------------------");
        }
    }

    private void logout() throws RemoteException {
        service.logout(currentUser);
        currentUser = null;
        System.out.println("Logged out successfully!");
    }

    public static void main(String[] args) {
        Client client = new Client();
        client.start();
    }
}

DatabaseManager.java
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

class DatabaseManager {
    private static final String DATA_DIR = "facebook_data/";
    
    static {
        new File(DATA_DIR).mkdirs();
    }
    
    static boolean saveUser(String username, String password) {
        try {
            Files.write(Paths.get(DATA_DIR + "users.txt"), 
                       (username + ":" + password + "\n").getBytes(),
                       StandardOpenOption.CREATE, StandardOpenOption.APPEND);
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    static boolean userExists(String username) {
        try {
            return Files.lines(Paths.get(DATA_DIR + "users.txt"))
                       .anyMatch(line -> line.split(":")[0].equals(username));
        } catch (IOException e) {
            return false;
        }
    }
    
    static boolean verifyUser(String username, String password) {
        try {
            return Files.lines(Paths.get(DATA_DIR + "users.txt"))
                       .anyMatch(line -> line.equals(username + ":" + password));
        } catch (IOException e) {
            return false;
        }
    }

    static void saveFriend(String username, String friend) {
        try {
            Files.write(Paths.get(DATA_DIR + username + "_friends.txt"),
                       (friend + "\n").getBytes(),
                       StandardOpenOption.CREATE, StandardOpenOption.APPEND);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static Set<String> loadFriends(String username) {
        Set<String> friends = new HashSet<>();
        try {
            Path path = Paths.get(DATA_DIR + username + "_friends.txt");
            if (Files.exists(path)) {
                Files.lines(path).forEach(friends::add);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return friends;
    }
    
    static void savePost(String username, Post post) {
        try {
            String postData = post.id + ":" + post.content + "\n";
            Files.write(Paths.get(DATA_DIR + username + "_posts.txt"),
                       postData.getBytes(),
                       StandardOpenOption.CREATE, StandardOpenOption.APPEND);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    static List<Post> loadPosts(String username) {
        List<Post> posts = new ArrayList<>();
        try {
            Path path = Paths.get(DATA_DIR + username + "_posts.txt");
            if (Files.exists(path)) {
                Files.lines(path).forEach(line -> {
                    String[] parts = line.split(":", 2);
                    posts.add(new Post(Integer.parseInt(parts[0]), username, parts[1]));
                });
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return posts;
    }
    
    static void saveMessage(String to, Message msg) {
        try {
            Files.write(Paths.get(DATA_DIR + to + "_messages.txt"),
                       (msg.from + ":" + msg.content + "\n").getBytes(),
                       StandardOpenOption.CREATE, StandardOpenOption.APPEND);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    static List<Message> loadMessages(String username) {
        List<Message> messages = new ArrayList<>();
        try {
            Path path = Paths.get(DATA_DIR + username + "_messages.txt");
            if (Files.exists(path)) {
                Files.lines(path).forEach(line -> {
                    String[] parts = line.split(":", 2);
                    messages.add(new Message(parts[0], username, parts[1]));
                });
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return messages;
    }

    static void updatePost(String username, Post post) {
        Path path = Paths.get(DATA_DIR + username + "_posts.txt");
        List<String> updatedPosts = new ArrayList<>();
    
        try {
            if (Files.exists(path)) {
                List<String> lines = Files.readAllLines(path);
                for (String line : lines) {
                    // Use split with a limit of 2 to avoid splitting the content
                    String[] parts = line.split(":", 2); 
                    
                    // Check if the line has the expected format
                    if (parts.length < 2) {
                        continue; // Skip lines that are malformed
                    }
                    
                    int postId = Integer.parseInt(parts[0]);
                    
                    // If the post ID matches, update the post content
                    if (postId == post.id) {
                        // Include likes and comments in the updated content (optional)
                        String updatedPost = post.id + ":" + post.content + "\n";
                        updatedPosts.add(updatedPost);
                    } else {
                        updatedPosts.add(line + "\n");
                    }
                }
    
                // Write the updated post data to the file
                Files.write(path, updatedPosts, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    
}


1) Implement a function so that the database is persisting by adding few functions to read from existing "facebook_data" directory.
2) Also, add an option to store all notification and an option to "View All Notification" after the user has logged in.
3) The post feature support comment but do not print them out, it only shows the number of comment, help me fix that.
4) Add friend feature requires the target to accept, then only both of the user are friends together and recorded in their contact list. Help me fix that since for the current program, once the user add anyone to be friend, it'd be its friend already.
5) Add a feautre for every user to manage their post, including editing content and delete it.


1) View Notification still not working
2) Add friend feature requires the target to accept, then only both of the user are friends together and recorded in their contact list. Help me fix that since for the current program, once the user add anyone to be friend, it'd be its friend already.
3) View Friend Requests function not working as tied to (2)
4) Manage Posts function totally not working even if I have created a post

1) Notification database is not updated when user send a new message or new post is posted by friends However, it is updated after a friend request is sent.

Perhaps the saveNotification function doesn't support append? Help me fix that, so when my viewNotification function is called, I can see a lit of notification sort based on timestamp, if possible, print out the timestamp too.